stage: staging
nameOverride: hevelop
## Optionally specify an array of imagePullSecrets.
## Secrets must be manually created in the namespace.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
##
# pullSecrets:
#   - myRegistrKeySecretName

global:
  host: magento.hevelop.com
  # secondaryHost: www.magento.hevelop.com
  # thirdHost: admin.magento.hevelop.com

httpd:
  replicaCount: 1
  registry: hevelop-docker.jfrog.io
  repository: hevelop/httpd-m1-prod
  tag: 0.0.1
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent  
  ##
  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    requests:
      memory: 256Mi
      cpu: 300m
    limits:
      memory: 256Mi
      cpu: 300m
  livenessProbe:
    enabled: true
  readinessProbe:
    enabled: true
    path: /favicon.ico
    port: 80
  rollingUpdate:
    maxUnavailable: 25%
    maxSurge: 25%
  terminationGracePeriodSeconds: 60
  lifecycle:
    preStopCommand:
      - "httpd"
      - "-k"
      - "graceful-stop"

phpfpm:
  replicaCount: 1
  registry: hevelop-docker.jfrog.io
  repository: hevelop/php70-m1-prod
  tag: 0.0.1
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## Specify setting for php fpm
  ##
  configVersion: "7.0"
  ## Use production or development
  configEnv: production
  memoryLimit: 256M
  processManager: static
  pmMaxChildren: 5
  PmProcessIdleTimeout: 0
  PmMaxRequests: 500
  RequestTerminateTimeout: 0
  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    requests:
      memory: 512Mi
      cpu: 500m
    limits:
      memory: 512Mi
      cpu: 500m
  livenessProbe:
    enabled: true
  readinessProbe:
    enabled: true
  rollingUpdate:
    maxUnavailable: 25%
    maxSurge: 25%
  terminationGracePeriodSeconds: 60
  lifecycle:
    preStopCommand:
      - |-
        kill -3 1
        while kill -0 1;do sleep 1;done;
varnish:
  enabled: 0
  replicaCount: 1
  registry: hevelop-docker.jfrog.io
  repository: cooptilleuls/varnish
  tag: 4.1-alpine
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent  
  ##
  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    requests:
      memory: 256Mi
      cpu: 300m
    limits:
      memory: 256Mi
      cpu: 300m
  livenessProbe:
    enabled: true
  readinessProbe:
    enabled: true
    path: /favicon.ico
    port: 80
  rollingUpdate:
    maxUnavailable: 25%
    maxSurge: 25%
  terminationGracePeriodSeconds: 60
  lifecycle:
    preStopCommand:
      - "sh"
      - "/graceful-shutdown.sh"

cron:
  enabled: false
  registry: hevelop-docker.jfrog.io
  repository: hevelop/php70-cli-m1-prod
  tag: 0.0.1
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  command: "/var/www/deploy/htdocs/scheduler_cron.sh"
  resources:
    requests:
      memory: 512Mi
      cpu: 500m
    limits:
      memory: 512Mi
      cpu: 500m

prehook:
  enabled: false
  registry: hevelop-docker.jfrog.io
  repository: hevelop/php70-cli-m1-prod
  tag: 0.0.1
  command: "sh build/pre-hook.sh"
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent

## Configure liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
##
livenessProbe:
  initialDelaySeconds: 300
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 6
readinessProbe:
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 3
  successThreshold: 1
  failureThreshold: 3

## Pod annotations
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
efs:
  enabled: false
  storage: 500Gi
  # existingPvcName: "my-persisten-volume-claim"
  containerMountPaths: []
    # - /htdocs/var
    # - /htdocs/media
    # - /htdocs/sitemaps

##
## External database configuration
##
externalDatabase:
  ## Database host
  host:

  ## Database host
  port: 3306

  ## Database user
  user: magento

  ## Database password
  password:

  ## Database name
  database: magento

##
## MariaDB chart configuration
##
## https://github.com/helm/charts/blob/master/stable/mariadb/values.yaml
##
mariadb:
  ## Whether to deploy a mariadb server to satisfy the applications database requirements. To use an external database set this to false and configure the externalDatabase parameters
  enabled: false
  ## Disable MariaDB replication
  replication:
    enabled: false

  ## Create a database and a database user
  ## ref: https://github.com/bitnami/bitnami-docker-mariadb/blob/master/README.md#creating-a-database-user-on-first-run
  ##
  db:
    name: bitnami_magento
    user: bn_magento
    ## If the password is not specified, mariadb will generates a random password
    ##
    # password:

  ## MariaDB admin password
  ## ref: https://github.com/bitnami/bitnami-docker-mariadb/blob/master/README.md#setting-the-root-password-on-first-run
  ##
  # rootUser:
  #   password:

  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  master:
    persistence:
      enabled: true
      ## mariadb data Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      # storageClass: "-"
      accessMode: ReadWriteOnce
      size: 8Gi      

loadBalancer:
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    # alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    # alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:eu-central-1:603546504115:certificate/0f15faaf-d57b-4620-a10f-5b5d02427db2
    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-1-2017-01
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: "80"
    alb.ingress.kubernetes.io/healthcheck-path: /index.php